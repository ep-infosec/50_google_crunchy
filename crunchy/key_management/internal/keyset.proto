// Copyright 2017 The CrunchyCrypt Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package crunchy;
option java_package = "com.google.security.crunchy.keymanagement";

import "crunchy/internal/port/any.proto";
import "crunchy/key_management/keyset_enums.proto";

option java_outer_classname = "KeysetOuterClass";
option java_multiple_files = true;

// A KeyType specifies the exact key type (e.g. aes-128-gcm) that weâ€™re
// using.
message KeyType {
  oneof label {
    // A unique URI that identifies the keytype.
    string crunchy_label = 1;
  }
}

// KeyMetadata holds non-private (i.e., no key material) details about the
// key. This does not need to be encrypted when we wrap a key, but should be
// integrity protected.
message KeyMetadata {
  KeyType type = 1;
  KeyStatus status = 2;

  // This is a string that may be prefixed to ciphertexts and signatures
  // generated by this key. One intended use is a per-keyset mapping that
  // maps prefixes to keys to allow efficient key lookup when performing
  // decryption/verification.
  bytes prefix = 3;

  // Metadata reserved for applications.
  repeated crunchy.Any application_specific_metadata = 100;
}

// The actual wrapped or raw key material.
message KeyData {
  bytes public_key = 1;
  oneof data {
    bytes private_key = 2;
    bytes encrypted_key_data = 3;
  }
}

message Key {
  KeyMetadata metadata = 1;
  KeyData data = 2;
}

// CrunchyCrypt's internal representation of a keyset.
message Keyset {
  // The keys in our keyset.
  repeated Key key = 1;

  // The primary key of our keyset determine which key in the repeated keys
  // field should be used to encrypt/sign.
  int32 primary_key_id = 2;

  // Metadata reserved for applications.
  repeated crunchy.Any application_specific_metadata = 100;
}
